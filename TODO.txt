  TODO:
  -audit code:
    -my code is in a basic working state, so I think now is a good time
    to audit and refactor as necessary
      -possible issues:
        -config data:
          -I have a lot of configuration numbers spread throughout my code
          -I may want to consider create a config class that loads in
          settings from a config file so that there's a centralized place
          for these settings
            -the main problem I see with this is that I may have many
            classes that need to access this config data
              -is this a problem?
              -I may want to have one config file but multiple config
              classes that load their data from that file
    -General Architecture
      -instead of my chip diagram class having to know everything about
      how all the chip components are generated, laid out, and drawn,
      I can have collection objects that handle that instead
        -for example, I can have a Connections class that takes in the
        chip data and grabs what it needs and handles all the logic
        and data for connections
          -I can have a Parts class that does the same thing
          -what about IO objects?
    -I have some error messages and warnings where the display of the
    error should probably be handled by error class
    -Chip Diagram class:
      -_generate_connections method:
        -chip diagram very tightly coupled to internal structure of
        chip_data.connections_data
          -possible solutions:
            -could delegate the generation of diagrammable objects to
            the chip data class
              -but this doesn't feel very natural, the chip data class
              should really only be concerned with getting the relevant
              data from the chip AST
          -thoughts:
            -the fact that I have to dig so much into the internals of the
            connection data and do so much complicated logic with it is
            probably indicative of some issue
              -possibly that the data that chip data class gets should be
              data classes themselves?
            -look into factory patterns again to see if any of them fit
            my situation where I'm generating the different diagrammable
            objects
            -also do a search solutions to code smell where you have to
            access internal structure of data
            -if changing the internal structure of the data also
            requires changing the code that uses it then maybe those pieces
            of code should be in the same class
            -when I create a connection I'm passing in two io objects which are
            View objects if I'm thinking of things like a Model-View pattern
              -by contrast, I'm only using data (Model) to create other View objects
              -so I probably need to change the connection object to only use data
              and not IO objects (it will generate the io objects internally like
              the Part class does)
            -an abstraction that I may want to try is to use a Model-View pattern
            for each diagrammable object (except maybe title which only needs text 
            for its Model)
              -each View object then would only require that you pass in the Model
              object when it's created
              -the Chip_Data object would create all the Model objects based upon
              the chip_ast
            -It might make sense for IO objects to have unique ids but I'm not
            sure
              -wait until I implement the Connection_Model to decide        
            -Connection_Model:
              -the problem with the connection model is that it really only
              needs the connection points from the io objects but the
              connection points aren't determined until the io view objects
              are laid out
                -this would suggest that I need to layout the io in order
                to generate the connection_model objects?
              -maybe my current concept of diagrammables is wrong
                -maybe the models should have the layout method and,
                and therefore, all the position and other related data
                  -then I would have the models be layoutables and the
                  views be drawables
  -connections:
  -path finding:
    -fix issues:
      -colinearity scores help a good bit with connections being
      drawn on top of each other but there's still an issue with lines
      drawing through connection points (especially the first path since
      there aren't any points to avoid)
        -I could say that the connection points are already used before
        any paths are drawn
        -I have to be careful with how much weight I give to colinearity
        because if I give it too much weight then the algo will take too
        long to run exploring paths that have no chance of being correct
          -As a possible solution to this, I could decrease the influence
          of colinearity over time (number of iterations) or space (dist
          traveled)
      -colinearity doesn't minimize crossover
        -I still need to change my ordering algo a bit which might help
        with this
      -need to calculate and add number of bends to path score to minimize bends
  -re-examine code (especially chip layout and note most egregious code smells
  and possible solutions)
  -refactor
  -take a second look at the drawing methods and re-work them as necessary to account
  for the fact that there are no sub-pixels when drawing
    -due to that fact, I might want to always snap every coordinate passed to a drawing
  method to the next integer
  -use pathfinding algo to draw connections between the connection points  
    -first I need to create a function or something that will tell me
    when I'm inside a part so I can avoid drawing connections through parts
      -ideally this can be part of the behavior of the boundary object
    -concern:
      -it's possible that wires will draw along the same grid lines for long
      portions of their path which may make it hard to see what's actually
      happening
      -maybe I can use the connection point data to avoid using the same
      grid points and lines
    -thought:
      -the start and end connection points won't be on a grid line in most
      cases, so I'll need to draw a line that connects each point to the
      grid
  -create a visitor that draws a tree of the AST
    -this should be relatively easy (maybe?) and illustrative of why it's called
    a syntax tree
  -add error handling and reporting for parser errors
    -go back to the crafting interpreters book for this but keep in mind
    that I WILL have a separate error class since I will have more possible
    errors that can occur
  -figure out how I want to handle checking other sorts of rules
    -first review rules to make sure they're categorized the way I want
    -make the all the parts that have rules associated with them (like the
    chip graph) first before making some sort of extraneous rule verifier
      -ideally all the rules for chips would be encoded naturally in parts of
      the system I'm constructing

  -find relationships between elements (margins, etc.)
  
  
  
  -SAVE THIS FOR A LATER DATE IF I REALLY WANT TO:
    -figure out how to recursively expand custom chip parts so that their
  internals can be drawn in the diagram
